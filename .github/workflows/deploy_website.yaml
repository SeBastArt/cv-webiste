name: Website-Deployment

on:
  workflow_dispatch:
    inputs:
      baseversion:
        description: 'Image base version'
        required: true
        default: '1.0'
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '**/*.md'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prepare.outputs.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Prepare Version
        id: prepare
        run: |
          # Create version like v1.0.<run_number>
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="v${{ github.event.inputs.baseversion }}.${GITHUB_RUN_NUMBER}"
          else
            VERSION="v1.0.${GITHUB_RUN_NUMBER}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

  build:
    needs: prepare
    runs-on: ubuntu-latest
    env:
      DOCKER_TARGET_PLATFORM: linux/amd64
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push website image
        run: |
          docker buildx build . \
            --platform $DOCKER_TARGET_PLATFORM \
            --file Dockerfile \
            --tag sebastart/sebastianschueler-website:${{ needs.prepare.outputs.version }} \
            --tag sebastart/sebastianschueler-website:latest \
            --output type=image,push=true

  deploy:
    needs: [build, prepare]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
      - name: Configure Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - name: Deploy with Helm
        run: |
          helm upgrade --install sebastianschueler-website ./helm/sebastianschueler-website \
            --create-namespace \
            --namespace sebastianschueler \
            --set website.imageVersion=${{ needs.prepare.outputs.version }}